name: country-innovation-index CI/CD

on:
  push:
    branches:
      - main
    paths:
      - 'infra/**'
      - './'
      - '.github/workflows/main.yml'
  workflow_dispatch:

env:
  DEPLOY_ENV: dev   # <-- wstrzykujemy environment
  PYTHON_VERSION: '3.12'
  FUNCTION_APP_OS: linux
  TERRAFORM_DIR: ./infra
  FUNCTION_CODE_DIR: ./ 
  AZURE_FUNCTION_APP_PACKAGE_NAME: 'function_app_package.zip'
  AZURE_FUNCTION_APP_PACKAGE_FULL_PATH: '${{ github.workspace }}/function_app_package.zip'

jobs:
  terraform:
    name: "terraform dev"
    runs-on: ubuntu-latest
    outputs:
      function_app_name: ${{ steps.tf_outputs.outputs.function_app_name }}
      resource_group_name: ${{ steps.tf_outputs.outputs.resource_group_name }}
      storage_account_name: ${{ steps.tf_outputs.outputs.storage_account_name }}
      storage_container_name: ${{ steps.tf_outputs.outputs.storage_container_name }}
      data_lake_storage_account_name: ${{ steps.tf_outputs.outputs.data_lake_storage_account_name }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Azure Login for Terraform
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Export Azure Credentials to Environment
        run: |
          echo "ARM_CLIENT_ID=${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.TERRAFORM_DIR }}

      - name: Terraform Validate
        run: terraform validate
        working-directory: ${{ env.TERRAFORM_DIR }}

      - name: Terraform Plan
        run: terraform plan -var="environment=${{ env.DEPLOY_ENV }}" -input=false -out=tfplan
        working-directory: ${{ env.TERRAFORM_DIR }}

      - name: Terraform Apply
        run: terraform apply -var="environment=${{ env.DEPLOY_ENV }}" -input=false -auto-approve
        working-directory: ${{ env.TERRAFORM_DIR }}

      - name: Get Terraform Outputs
        id: tf_outputs
        run: |
          FUNCTION_APP_NAME=$(terraform output -raw function_app_name)
          RESOURCE_GROUP_NAME=$(terraform output -raw resource_group_name)
          STORAGE_ACCOUNT_NAME=$(terraform output -raw storage_account_name)
          STORAGE_CONTAINER_NAME=$(terraform output -raw configs_container_name)
          DATA_LAKE_STORAGE_ACCOUNT_NAME=$(terraform output -raw data_lake_storage_account_name)
          EVENTGRID_TOPIC_NAME=$(terraform output -raw eventgrid_topic_name)

          echo "FUNCTION_APP_NAME=$FUNCTION_APP_NAME" >> $GITHUB_ENV
          echo "RESOURCE_GROUP_NAME=$RESOURCE_GROUP_NAME" >> $GITHUB_ENV
          echo "STORAGE_ACCOUNT_NAME=$STORAGE_ACCOUNT_NAME" >> $GITHUB_ENV
          echo "STORAGE_CONTAINER_NAME=$STORAGE_CONTAINER_NAME" >> $GITHUB_ENV
          echo "DATA_LAKE_STORAGE_ACCOUNT_NAME=$DATA_LAKE_STORAGE_ACCOUNT_NAME" >> $GITHUB_ENV
          echo "EVENTGRID_TOPIC_NAME=$EVENTGRID_TOPIC_NAME" >> $GITHUB_ENV

          echo "function_app_name=$FUNCTION_APP_NAME" >> $GITHUB_OUTPUT
          echo "resource_group_name=$RESOURCE_GROUP_NAME" >> $GITHUB_OUTPUT
          echo "storage_account_name=$STORAGE_ACCOUNT_NAME" >> $GITHUB_OUTPUT
          echo "storage_container_name=$STORAGE_CONTAINER_NAME" >> $GITHUB_OUTPUT
          echo "data_lake_storage_account_name=$DATA_LAKE_STORAGE_ACCOUNT_NAME" >> $GITHUB_OUTPUT
          echo "eventgrid_topic_name=$EVENTGRID_TOPIC_NAME" >> $GITHUB_OUTPUT
        working-directory: ${{ env.TERRAFORM_DIR }}

      - name: Logout from Azure (Terraform)
        run: az logout
        if: always()

  upload-manifest:
    name: "upload manifest dev"
    runs-on: ubuntu-latest
    needs: terraform
    strategy:
      matrix:
        layer: [bronze, silver, gold]
    env:
      AZURE_STORAGE_ACCOUNT_NAME: ${{ needs.terraform.outputs.storage_account_name }}
      AZURE_DATA_LAKE_STORAGE_ACCOUNT_NAME: ${{ needs.terraform.outputs.data_lake_storage_account_name }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Upload manifest
        run: |
          echo "Uploading manifest for env=${{ env.DEPLOY_ENV }} to layer: ${{ matrix.layer }}"
          az storage blob upload \
            --account-name "$AZURE_DATA_LAKE_STORAGE_ACCOUNT_NAME" \
            --container-name "${{ matrix.layer }}" \
            --file "src/${{ matrix.layer }}/manifest/${{ env.DEPLOY_ENV }}.manifest.json" \
            --name "manifest/${{ env.DEPLOY_ENV }}.manifest.json" \
            --overwrite true \
            --auth-mode login

  deploy-function:
    name: "deploy functions dev"
    runs-on: ubuntu-latest
    needs: [terraform, upload-manifest]
    if: success()
    env:
      FUNCTION_APP_NAME: ${{ needs.terraform.outputs.function_app_name }}
      RESOURCE_GROUP_NAME: ${{ needs.terraform.outputs.resource_group_name }}
      AZURE_FUNCTION_APP_PACKAGE_FULL_PATH: ${{ github.workspace }}/function_app_package.zip
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Zip Function App Code
        run: |
          sudo apt-get update && sudo apt-get install -y zip
          zip -r ${{ env.AZURE_FUNCTION_APP_PACKAGE_FULL_PATH }} function_app.py requirements.txt host.json src/common src/bronze
        working-directory: ${{ env.FUNCTION_CODE_DIR }}

      - name: Deploy Function App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.FUNCTION_APP_NAME }}
          slot-name: 'production'
          package: ${{ env.AZURE_FUNCTION_APP_PACKAGE_FULL_PATH }}

      - name: Logout from Azure (Deployment)
        run: az logout
        if: always()




  # terraform-prod:
  #   name: "terraform prod"
  #   runs-on: ubuntu-latest
  #   needs: deploy-function
  #   environment: prod    # <-- GitHub wymaga manualnego zatwierdzenia w UI
  #   env:
  #     DEPLOY_ENV: prod
  #   outputs:
  #     function_app_name: ${{ steps.tf_outputs.outputs.function_app_name }}
  #     resource_group_name: ${{ steps.tf_outputs.outputs.resource_group_name }}
  #     storage_account_name: ${{ steps.tf_outputs.outputs.storage_account_name }}
  #     storage_container_name: ${{ steps.tf_outputs.outputs.storage_container_name }}
  #     data_lake_storage_account_name: ${{ steps.tf_outputs.outputs.data_lake_storage_account_name }}
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4

  #     - name: Azure Login for Terraform
  #       uses: azure/login@v2
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS }}

  #     - name: Export Azure Credentials to Environment
  #       run: |
  #         echo "ARM_CLIENT_ID=${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}" >> $GITHUB_ENV
  #         echo "ARM_CLIENT_SECRET=${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}" >> $GITHUB_ENV
  #         echo "ARM_SUBSCRIPTION_ID=${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}" >> $GITHUB_ENV
  #         echo "ARM_TENANT_ID=${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}" >> $GITHUB_ENV

  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v3
  #       with:
  #         terraform_version: 1.5.0

  #     - name: Terraform Init
  #       run: terraform init
  #       working-directory: ${{ env.TERRAFORM_DIR }}

  #     - name: Terraform Validate
  #       run: terraform validate
  #       working-directory: ${{ env.TERRAFORM_DIR }}

  #     - name: Terraform Plan
  #       run: terraform plan -var="environment=${{ env.DEPLOY_ENV }}" -input=false -out=tfplan
  #       working-directory: ${{ env.TERRAFORM_DIR }}

  #     - name: Terraform Apply
  #       run: terraform apply -input=false -auto-approve
  #       working-directory: ${{ env.TERRAFORM_DIR }}

  #     - name: Get Terraform Outputs
  #       id: tf_outputs
  #       run: |
  #         FUNCTION_APP_NAME=$(terraform output -raw function_app_name)
  #         RESOURCE_GROUP_NAME=$(terraform output -raw resource_group_name)
  #         STORAGE_ACCOUNT_NAME=$(terraform output -raw storage_account_name)
  #         STORAGE_CONTAINER_NAME=$(terraform output -raw configs_container_name)
  #         DATA_LAKE_STORAGE_ACCOUNT_NAME=$(terraform output -raw data_lake_storage_account_name)
  #         EVENTGRID_TOPIC_NAME=$(terraform output -raw eventgrid_topic_name)

  #         echo "FUNCTION_APP_NAME=$FUNCTION_APP_NAME" >> $GITHUB_ENV
  #         echo "RESOURCE_GROUP_NAME=$RESOURCE_GROUP_NAME" >> $GITHUB_ENV
  #         echo "STORAGE_ACCOUNT_NAME=$STORAGE_ACCOUNT_NAME" >> $GITHUB_ENV
  #         echo "STORAGE_CONTAINER_NAME=$STORAGE_CONTAINER_NAME" >> $GITHUB_ENV
  #         echo "DATA_LAKE_STORAGE_ACCOUNT_NAME=$DATA_LAKE_STORAGE_ACCOUNT_NAME" >> $GITHUB_ENV
  #         echo "EVENTGRID_TOPIC_NAME=$EVENTGRID_TOPIC_NAME" >> $GITHUB_ENV

  #         echo "function_app_name=$FUNCTION_APP_NAME" >> $GITHUB_OUTPUT
  #         echo "resource_group_name=$RESOURCE_GROUP_NAME" >> $GITHUB_OUTPUT
  #         echo "storage_account_name=$STORAGE_ACCOUNT_NAME" >> $GITHUB_OUTPUT
  #         echo "storage_container_name=$STORAGE_CONTAINER_NAME" >> $GITHUB_OUTPUT
  #         echo "data_lake_storage_account_name=$DATA_LAKE_STORAGE_ACCOUNT_NAME" >> $GITHUB_OUTPUT
  #         echo "eventgrid_topic_name=$EVENTGRID_TOPIC_NAME" >> $GITHUB_OUTPUT
  #       working-directory: ${{ env.TERRAFORM_DIR }}

  #     - name: Logout from Azure (Terraform)
  #       run: az logout
  #       if: always()

  # upload-manifest-prod:
  #   name: "upload manifest prod"
  #   runs-on: ubuntu-latest
  #   needs: terraform-prod
  #   strategy:
  #     matrix:
  #       layer: [bronze, silver, gold]
  #   env:
  #     AZURE_STORAGE_ACCOUNT_NAME: ${{ needs.terraform-prod.outputs.storage_account_name }}
  #     AZURE_DATA_LAKE_STORAGE_ACCOUNT_NAME: ${{ needs.terraform-prod.outputs.data_lake_storage_account_name }}
  #     DEPLOY_ENV: prod
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4

  #     - name: Azure Login
  #       uses: azure/login@v2
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS }}

  #     - name: Upload manifest
  #       run: |
  #         echo "Uploading manifest for env=${{ env.DEPLOY_ENV }} to layer: ${{ matrix.layer }}"
  #         az storage blob upload \
  #           --account-name "$AZURE_DATA_LAKE_STORAGE_ACCOUNT_NAME" \
  #           --container-name "${{ matrix.layer }}" \
  #           --file "src/${{ matrix.layer }}/manifest/${{ env.DEPLOY_ENV }}.manifest.json" \
  #           --name "manifest/${{ env.DEPLOY_ENV }}.manifest.json" \
  #           --overwrite true \
  #           --auth-mode login

  # deploy-function-prod:
  #   name: "deploy functions prod"
  #   runs-on: ubuntu-latest
  #   needs: [terraform-prod, upload-manifest-prod]
  #   if: success()
  #   env:
  #     FUNCTION_APP_NAME: ${{ needs.terraform-prod.outputs.function_app_name }}
  #     RESOURCE_GROUP_NAME: ${{ needs.terraform-prod.outputs.resource_group_name }}
  #     AZURE_FUNCTION_APP_PACKAGE_FULL_PATH: ${{ github.workspace }}/function_app_package.zip
  #     DEPLOY_ENV: prod
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4

  #     - name: Setup Python
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: ${{ env.PYTHON_VERSION }}

  #     - name: Azure Login
  #       uses: azure/login@v2
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS }}

  #     - name: Zip Function App Code
  #       run: |
  #         sudo apt-get update && sudo apt-get install -y zip
  #         zip -r ${{ env.AZURE_FUNCTION_APP_PACKAGE_FULL_PATH }} function_app.py requirements.txt host.json src/common src/bronze
  #       working-directory: ${{ env.FUNCTION_CODE_DIR }}

  #     - name: Deploy Function App
  #       uses: azure/webapps-deploy@v2
  #       with:
  #         app-name: ${{ env.FUNCTION_APP_NAME }}
  #         slot-name: 'production'
  #         package: ${{ env.AZURE_FUNCTION_APP_PACKAGE_FULL_PATH }}

  #     - name: Logout from Azure (Deployment)
  #       run: az logout
  #       if: always()
