name: cv-demo1 CI/CD

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy (dev or prod)'
        required: true
        default: 'dev'
  push:
    branches:
      - main
    paths:
      - 'infra/**'
      - './'
      - '.github/workflows/main.yml'

env:
  PYTHON_VERSION: '3.12'
  TERRAFORM_DIR: ./infra
  FUNCTION_CODE_DIR: ./
  AZURE_FUNCTION_APP_PACKAGE_NAME: 'function_app_package.zip'
  AZURE_FUNCTION_APP_PACKAGE_FULL_PATH: '${{ github.workspace }}/function_app_package.zip'

jobs:
  terraform:
    name: "Terraform ${{ github.event.inputs.environment || 'dev' }}"
    runs-on: ubuntu-latest
    outputs:
      function_app_name: ${{ steps.tf_outputs.outputs.function_app_name }}
      resource_group_name: ${{ steps.tf_outputs.outputs.resource_group_name }}
      storage_account_name: ${{ steps.tf_outputs.outputs.storage_account_name }}
      storage_container_name: ${{ steps.tf_outputs.outputs.storage_container_name }}
      data_lake_storage_account_name: ${{ steps.tf_outputs.outputs.data_lake_storage_account_name }}
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Export Azure Credentials
        run: |
          echo "ARM_CLIENT_ID=${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: terraform init
        working-directory: ${{ env.TERRAFORM_DIR }}

      - name: Terraform Plan
        run: terraform plan -input=false -out=tfplan -var="environment=${{ github.event.inputs.environment || 'dev' }}"
        working-directory: ${{ env.TERRAFORM_DIR }}

      - name: Terraform Apply
        run: terraform apply -input=false -auto-approve tfplan
        working-directory: ${{ env.TERRAFORM_DIR }}

      - name: Get Terraform Outputs
        id: tf_outputs
        run: |
          FUNCTION_APP_NAME=$(terraform output -raw function_app_name)
          RESOURCE_GROUP_NAME=$(terraform output -raw resource_group_name)
          STORAGE_ACCOUNT_NAME=$(terraform output -raw storage_account_name)
          STORAGE_CONTAINER_NAME=$(terraform output -raw configs_container_name)
          DATA_LAKE_STORAGE_ACCOUNT_NAME=$(terraform output -raw data_lake_storage_account_name)
          EVENTGRID_TOPIC_NAME=$(terraform output -raw eventgrid_topic_name)

          echo "FUNCTION_APP_NAME=$FUNCTION_APP_NAME" >> $GITHUB_ENV
          echo "RESOURCE_GROUP_NAME=$RESOURCE_GROUP_NAME" >> $GITHUB_ENV
          echo "STORAGE_ACCOUNT_NAME=$STORAGE_ACCOUNT_NAME" >> $GITHUB_ENV
          echo "STORAGE_CONTAINER_NAME=$STORAGE_CONTAINER_NAME" >> $GITHUB_ENV
          echo "DATA_LAKE_STORAGE_ACCOUNT_NAME=$DATA_LAKE_STORAGE_ACCOUNT_NAME" >> $GITHUB_ENV
          echo "EVENTGRID_TOPIC_NAME=$EVENTGRID_TOPIC_NAME" >> $GITHUB_ENV

          echo "function_app_name=$FUNCTION_APP_NAME" >> $GITHUB_OUTPUT
          echo "resource_group_name=$RESOURCE_GROUP_NAME" >> $GITHUB_OUTPUT
          echo "storage_account_name=$STORAGE_ACCOUNT_NAME" >> $GITHUB_OUTPUT
          echo "storage_container_name=$STORAGE_CONTAINER_NAME" >> $GITHUB_OUTPUT
          echo "data_lake_storage_account_name=$DATA_LAKE_STORAGE_ACCOUNT_NAME" >> $GITHUB_OUTPUT
          echo "eventgrid_topic_name=$EVENTGRID_TOPIC_NAME" >> $GITHUB_OUTPUT
        working-directory: ${{ env.TERRAFORM_DIR }}

      - name: Logout from Azure
        run: az logout
        if: always()

  deploy-function:
    name: "Deploy Function ${{ github.event.inputs.environment || 'dev' }}"
    runs-on: ubuntu-latest
    needs: terraform
    if: success()
    env:
      FUNCTION_APP_NAME: ${{ needs.terraform.outputs.function_app_name }}
      RESOURCE_GROUP_NAME: ${{ needs.terraform.outputs.resource_group_name }}
      AZURE_FUNCTION_APP_PACKAGE_FULL_PATH: ${{ github.workspace }}/function_app_package.zip
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Zip Function App
        run: |
          sudo apt-get update && sudo apt-get install -y zip
          zip -r ${{ env.AZURE_FUNCTION_APP_PACKAGE_FULL_PATH }} function_app.py requirements.txt host.json src/common src/bronze
        working-directory: ${{ env.FUNCTION_CODE_DIR }}

      - name: Deploy Function App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.FUNCTION_APP_NAME }}
          slot-name: 'production'
          package: ${{ env.AZURE_FUNCTION_APP_PACKAGE_FULL_PATH }}

      - name: Logout from Azure
        run: az logout
        if: always()
