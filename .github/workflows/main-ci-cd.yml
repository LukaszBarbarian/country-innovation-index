name: actions cv-demo1

on:
  push:
    branches:
      - main
    paths:
      - 'infra/**'
      - './' # Obejmuje wszystkie zmiany w katalogu głównym i jego podkatalogach
      - '.github/workflows/main-ci-cd.yml'
  workflow_dispatch: # Pozwala na ręczne uruchomienie workflow

env:
  PYTHON_VERSION: '3.11' # Ustaw jedną, spójną wersję Pythona
  FUNCTION_APP_OS: linux
  TERRAFORM_DIR: ./infra
  FUNCTION_CODE_DIR: ./ # Definicja, że kod funkcji jest w katalogu głównym

jobs:
  terraform:
    runs-on: ubuntu-latest
    outputs:
      function_app_name: ${{ steps.tf_outputs.outputs.function_app_name }}
      resource_group_name: ${{ steps.tf_outputs.outputs.resource_group_name }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: 'Login to Azure for Terraform'
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Export Azure credentials for Terraform
      run: |
        echo "ARM_CLIENT_ID=${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}" >> $GITHUB_ENV
        echo "ARM_CLIENT_SECRET=${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}" >> $GITHUB_ENV
        echo "ARM_SUBSCRIPTION_ID=${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}" >> $GITHUB_ENV
        echo "ARM_TENANT_ID=${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}" >> $GITHUB_ENV

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Terraform Init
      run: terraform init
      working-directory: ${{ env.TERRAFORM_DIR }}

    - name: Terraform Validate
      run: terraform validate
      working-directory: ${{ env.TERRAFORM_DIR }}

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color -input=false -out=tfplan
      working-directory: ${{ env.TERRAFORM_DIR }}
      continue-on-error: true

    - name: Terraform Apply
      id: apply
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && steps.plan.outcome == 'success' }}
      run: terraform apply -input=false -auto-approve tfplan
      working-directory: ${{ env.TERRAFORM_DIR }}

    - name: Get Terraform Outputs
      id: tf_outputs
      run: |
        FUNCTION_APP_NAME=$(terraform output -raw function_app_name)
        RESOURCE_GROUP_NAME=$(terraform output -raw resource_group_name)

        echo "FUNCTION_APP_NAME=$FUNCTION_APP_NAME" >> $GITHUB_ENV
        echo "RESOURCE_GROUP_NAME=$RESOURCE_GROUP_NAME" >> $GITHUB_ENV

        echo "function_app_name=$FUNCTION_APP_NAME" >> $GITHUB_OUTPUT
        echo "resource_group_name=$RESOURCE_GROUP_NAME" >> $GITHUB_OUTPUT
      working-directory: ${{ env.TERRAFORM_DIR }}

    - name: Logout from Azure (Terraform)
      run: az logout
      if: always()

  deploy-function:
    runs-on: ubuntu-latest
    needs: terraform
    if: success()
    env:
      FUNCTION_APP_NAME: ${{ needs.terraform.outputs.function_app_name }}
      RESOURCE_GROUP_NAME: ${{ needs.terraform.outputs.resource_group_name }}
      # PYTHON_VERSION i FUNCTION_CODE_DIR dziedziczone z globalnego env

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python version
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Azure Functions Core Tools
      run: |
        npm install -g azure-functions-core-tools@4 --unsafe-perm true
        # Uwaga: dla 'az functionapp deploy' z --src istniejącym ZIP-em,
        # Azure Functions Core Tools nie jest technicznie potrzebne do samego deployu.
        # Jest potrzebne, jeśli używałbyś 'func azure functionapp publish' bezpośrednio w pipeline,
        # ale tutaj używamy az CLI. Możesz rozważyć usunięcie tego kroku,
        # jeśli nie planujesz używać innych komend func w przyszłości.

    - name: Install function app dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      working-directory: ${{ env.FUNCTION_CODE_DIR }}

    # Usunięto krok "Package Function App (ZIP)", ponieważ używasz już istniejącego "test_package.zip"

    - name: Login to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy Function App using existing ZIP (az CLI)
      run: |
        # Używamy az functionapp deploy, co jest odpowiednikiem --zip-path w func CLI.
        # Sprawdź, czy Twój plik test_package.zip zawiera WSZYSTKO, co jest potrzebne
        # do uruchomienia funkcji (kod, requirements.txt, host.json, itd.)
        az functionapp deploy \
          --resource-group ${{ env.RESOURCE_GROUP_NAME }} \
          --name ${{ env.FUNCTION_APP_NAME }} \
          --src "./test_package.zip" \
          --type zip \
          --build-remote true # Odpowiednik --build remote

    - name: Logout from Azure (Deployment)
      run: az logout
      if: always()