name: Workflow cv-demo1

on:
  push:
    branches:
      - main
    paths:
      - 'infra/**'
      - './'
      - '.github/workflows/main-ci-cd.yml'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  FUNCTION_APP_OS: linux
  TERRAFORM_DIR: ./infra
  FUNCTION_CODE_DIR: ./

jobs:
  terraform:
    runs-on: ubuntu-latest
    outputs:
      function_app_name: ${{ steps.tf_outputs.outputs.function_app_name }}
      resource_group_name: ${{ steps.tf_outputs.outputs.resource_group_name }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: 'Login to Azure for Terraform'
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Export Azure credentials for Terraform
      run: |
        echo "ARM_CLIENT_ID=${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}" >> $GITHUB_ENV
        echo "ARM_CLIENT_SECRET=${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}" >> $GITHUB_ENV
        echo "ARM_SUBSCRIPTION_ID=${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}" >> $GITHUB_ENV
        echo "ARM_TENANT_ID=${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}" >> $GITHUB_ENV

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Terraform Init
      run: terraform init
      working-directory: ${{ env.TERRAFORM_DIR }}

    - name: Terraform Validate
      run: terraform validate
      working-directory: ${{ env.TERRAFORM_DIR }}

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color -input=false -out=tfplan
      working-directory: ${{ env.TERRAFORM_DIR }}
      continue-on-error: true

    - name: Terraform Apply
      id: apply
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && steps.plan.outcome == 'success' }}
      run: terraform apply -input=false -auto-approve tfplan
      working-directory: ${{ env.TERRAFORM_DIR }}

    - name: Get Terraform Outputs
      id: tf_outputs
      run: |
        FUNCTION_APP_NAME=$(terraform output -raw function_app_name)
        RESOURCE_GROUP_NAME=$(terraform output -raw resource_group_name)

        echo "FUNCTION_APP_NAME=$FUNCTION_APP_NAME" >> $GITHUB_ENV
        echo "RESOURCE_GROUP_NAME=$RESOURCE_GROUP_NAME" >> $GITHUB_ENV

        echo "function_app_name=$FUNCTION_APP_NAME" >> $GITHUB_OUTPUT
        echo "resource_group_name=$RESOURCE_GROUP_NAME" >> $GITHUB_OUTPUT
      working-directory: ${{ env.TERRAFORM_DIR }}

    - name: Logout from Azure (Terraform)
      run: az logout
      if: always()

  deploy-function:
    runs-on: ubuntu-latest
    needs: terraform
    if: success()
    env:
      FUNCTION_APP_NAME: ${{ needs.terraform.outputs.function_app_name }}
      RESOURCE_GROUP_NAME: ${{ needs.terraform.outputs.resource_group_name }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python version
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Azure Functions Core Tools
      run: |
        npm install -g azure-functions-core-tools@4 --unsafe-perm true

    - name: Install function app dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      working-directory: ${{ env.FUNCTION_CODE_DIR }}

    - name: Zip Function App Content
      run: |
        func pack --output ${{ github.workspace }}/functionapp.zip --python
      working-directory: ${{ env.FUNCTION_CODE_DIR }}

    - name: 'Login to Azure for Deployment'
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: 'Deploy Azure Function App'
      uses: azure/functions-action@v1
      with:
        app-name: ${{ env.FUNCTION_APP_NAME }}
        package: ${{ github.workspace }}/functionapp.zip
        scm-do-build-during-deployment: true

    - name: Logout from Azure (Deployment)
      run: az logout
      if: always()
