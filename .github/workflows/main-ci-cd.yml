name: actions cv-demo1

on:
  push:
    branches:
      - main
    paths:
      - 'infra/**'
      - './'
      - '.github/workflows/main-ci-cd.yml'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.12'
  FUNCTION_APP_OS: linux
  TERRAFORM_DIR: ./infra
  FUNCTION_CODE_DIR: ./ # Definicja, że kod funkcji jest w katalogu głównym
  # Zdefiniuj ścieżkę do pliku ZIP. Ustawiamy go w katalogu głównym repozytorium.
  AZURE_FUNCTION_APP_PACKAGE_NAME: 'function_app_package.zip' # Tylko nazwa pliku
  AZURE_FUNCTION_APP_PACKAGE_FULL_PATH: '${{ github.workspace }}/function_app_package.zip' # Pełna ścieżka

jobs:
  terraform:
    runs-on: ubuntu-latest
    outputs:
      function_app_name: ${{ steps.tf_outputs.outputs.function_app_name }}
      resource_group_name: ${{ steps.tf_outputs.outputs.resource_group_name }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: 'Login to Azure for Terraform'
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Export Azure credentials for Terraform
      run: |
        echo "ARM_CLIENT_ID=${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}" >> $GITHUB_ENV
        echo "ARM_CLIENT_SECRET=${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}" >> $GITHUB_ENV
        echo "ARM_SUBSCRIPTION_ID=${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}" >> $GITHUB_ENV
        echo "ARM_TENANT_ID=${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}" >> $GITHUB_ENV

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Terraform Init
      run: terraform init
      working-directory: ${{ env.TERRAFORM_DIR }}

    - name: Terraform Validate
      run: terraform validate
      working-directory: ${{ env.TERRAFORM_DIR }}

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color -input=false -out=tfplan
      working-directory: ${{ env.TERRAFORM_DIR }}
      continue-on-error: true

    - name: Terraform Apply
      id: apply
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && steps.plan.outcome == 'success' }}
      run: terraform apply -input=false -auto-approve tfplan
      working-directory: ${{ env.TERRAFORM_DIR }}

    - name: Get Terraform Outputs
      id: tf_outputs
      run: |
        FUNCTION_APP_NAME=$(terraform output -raw function_app_name)
        RESOURCE_GROUP_NAME=$(terraform output -raw resource_group_name)
        DATA_FACTORY_NAME=$(terraform output -raw data_factory_name)

        echo "FUNCTION_APP_NAME=$FUNCTION_APP_NAME" >> $GITHUB_ENV
        echo "RESOURCE_GROUP_NAME=$RESOURCE_GROUP_NAME" >> $GITHUB_ENV
        echo "DATA_FACTORY_NAME=$DATA_FACTORY_NAME" >> $GITHUB_ENV

        echo "function_app_name=$FUNCTION_APP_NAME" >> $GITHUB_OUTPUT
        echo "resource_group_name=$RESOURCE_GROUP_NAME" >> $GITHUB_OUTPUT
        echo "data_factory_name=$DATA_FACTORY_NAME" >> $GITHUB_OUTPUT
      working-directory: ${{ env.TERRAFORM_DIR }}

    - name: Logout from Azure (Terraform)
      run: az logout
      if: always()

  deploy-function:
    runs-on: ubuntu-latest
    needs: terraform
    if: success()
    env:
      FUNCTION_APP_NAME: ${{ needs.terraform.outputs.function_app_name }}
      RESOURCE_GROUP_NAME: ${{ needs.terraform.outputs.resource_group_name }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python version
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Login to Azure
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Zip function app content # <-- Zmieniamy sposób pakowania
      run: |
        sudo apt-get update && sudo apt-get install -y zip
        # Pakujemy zawartość katalogu z kodem do pliku ZIP w głównym katalogu repozytorium
        zip -r ${{ env.AZURE_FUNCTION_APP_PACKAGE_FULL_PATH }} .
      working-directory: ${{ env.FUNCTION_CODE_DIR }} # Upewnij się, że pakujesz z ./ (katalogu z kodem)

    # - name: List files in current directory # <-- KROK DIAGNOSTYCZNY
    #   run: ls -la . 

    # - name: List files in workspace root # <-- KROK DIAGNOSTYCZNY
    #   run: ls -la ${{ github.workspace }}

    - name: Deploy Function App using Azure WebApps Deploy Action
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.FUNCTION_APP_NAME }}
        slot-name: 'production'
        package: ${{ env.AZURE_FUNCTION_APP_PACKAGE_FULL_PATH }} # <-- Używamy pełnej ścieżki
        # Wersja runtime Pythona, jeśli potrzebne (ale powinna być w Terraformie)
        # python-version: '${{ env.PYTHON_VERSION }}' # Możesz spróbować, ale już jest w TF

    - name: Logout from Azure (Deployment)
      run: az logout
      if: always()


  deploy-adf:
    name: Deploy ADF Pipelines
    runs-on: ubuntu-latest
    needs: terraform
    if: success()
    env:
      RESOURCE_GROUP_NAME: ${{ needs.terraform.outputs.resource_group_name }}
      DATAFACTORY_NAME: ${{ needs.terraform.outputs.data_factory_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Export ADF ARM Template
        run: |
          az datafactory pipeline export-arm-template \
            --factory-name $DATAFACTORY_NAME \
            --resource-group $RESOURCE_GROUP_NAME \
            --output-folder ./infra/adf \
            --overwrite

      - name: Deploy ADF ARM Template
        run: |
          az deployment group create \
            --resource-group $RESOURCE_GROUP_NAME \
            --template-file ./infra/adf/template.json \
            --parameters ./infra/adf/parameters.json

      - name: Logout from Azure (ADF)
        run: az logout
        if: always()
